// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name artemis_core
import AdSupport
import CoreLocation
import CoreTelephony
import DeviceKit
import Foundation
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import artemis_core
@objc @_inheritsConvenienceInitializers public class AAPreferencesUtil : ObjectiveC.NSObject {
  public static func saveConfig(config: artemis_core.AAConfig)
  public static func saveApiConfig(apiConfig: artemis_core.AAPIConfig)
  public static func deleteConfig()
  public static func getSdkConfig() -> artemis_core.AAConfig?
  public static func getApiConfig() -> artemis_core.AAPIConfig?
  public static func saveUserData(userId: Swift.String)
  public static func getUserData() -> artemis_core.AAUserDataCache?
  public static func getAdId() -> Swift.String?
  public static func saveCustomHeaders(headers: [Swift.String : Swift.String])
  public static func getCustomHeaders() -> [Swift.String : Swift.String]?
  public static func removeCustomHeaders()
  @objc override dynamic public init()
  @objc deinit
}
public struct AAPIConfig : Swift.Codable {
  public var initConfigUrl: Swift.String
  public var apiBaseUrl: Swift.String
  public var ngtBaseUrl: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct APIRequest {
  public init(endpoint: artemis_core.APIEndpoint, method: artemis_core.HTTPMethod, path: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, body: Foundation.Data? = nil)
}
public enum APIEndpoint : Swift.String {
  case getCampaign
  case sendTracking
  case sendAppTracking
  case sendPollAnswers
  case registerInNgt
  case unregisterInNgt
  case ngtCallback
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class APIService : ObjectiveC.NSObject {
  public static let shared: artemis_core.APIService
  public func request(_ apiRequest: artemis_core.APIRequest, completion: @escaping (Foundation.Data?, Foundation.HTTPURLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AACoreApiFactory : ObjectiveC.NSObject {
  public static func sendAppTrackerRequest(contextInfo: artemis_core.AAReportRequest) -> artemis_core.APIRequest
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AAReportHelper : ObjectiveC.NSObject {
  public static func sendReport(event: Swift.String? = nil, campaignUuid: Swift.String? = nil, userKeyType: Swift.String? = nil)
  public static func getDeviceInfoMap() -> [Swift.String : Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
public let data: artemis_core.AAManager
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AAManager : ObjectiveC.NSObject {
  public class var sharedInstance: artemis_core.AAManager {
    get
  }
  public func isInitialized() -> Swift.Bool
  public func isDebugMode() -> Swift.Bool
  public func isDisabled() -> Swift.Bool
  public func initialize(appKey: Swift.String, debugMode: Swift.Bool? = false, initCompleteCallback: (() -> ())? = nil)
  public func setUserId(userId: Swift.String)
  public func setCustomHeaders(headers: [Swift.String : Swift.String])
  public func requestPermission()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AAdsApiFactory : ObjectiveC.NSObject {
  open func sendAppTracking(request: artemis_core.APIRequest, completion: @escaping (Foundation.HTTPURLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public struct AAUserDataCache : Swift.Codable {
  public var userId: Swift.String
  public var advertisingId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AAReportRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AAConfig : Swift.Codable {
  public var ngtNotificationType: Swift.String
  public var ngtAppId: Swift.String
  public var kill: Swift.Bool?
  public var artemisAdsAppId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension artemis_core.HTTPMethod : Swift.Equatable {}
extension artemis_core.HTTPMethod : Swift.Hashable {}
extension artemis_core.HTTPMethod : Swift.RawRepresentable {}
extension artemis_core.APIEndpoint : Swift.Equatable {}
extension artemis_core.APIEndpoint : Swift.Hashable {}
extension artemis_core.APIEndpoint : Swift.RawRepresentable {}
